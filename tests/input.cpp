/**
 * @file input.cpp
 * @author Kobe Bergmans (kobe.bergmans@student.kuleuven.be)
 * @brief Test file for input matrices in different formats
 * @version 0.1
 * @date 2022-10-24
 * 
 * Requires following files in "/input" folder:
 *   - arc130.mtx
 */

#define BOOST_TEST_MODULE test_input
#include <boost/test/included/unit_test.hpp>

#include <vector>
#include <cmath>

#include "../SparseMatrix.hpp"
#include "../Triplet.hpp"
#include "GetMatrices.hpp"

#include "omp.h"
#include "oneapi/tbb.h"

BOOST_AUTO_TEST_SUITE(input_mv)

BOOST_AUTO_TEST_CASE(mv_arc130, * boost::unit_test::tolerance(std::pow(10, -14))) {
    pwm::Triplet<double, int> input_mat;
    input_mat.loadFromMM("test_input/arc130.mtx");
    int mat_size = input_mat.col_size;

    // Precomputed solution using matlab
    double real_sol[] = {7.833242759536130e+00, -6.993735475365190e+00, 1.936709185814659e+00, 2.503290850938932e+00, 3.339283448756583e-01, 5.869714739734910e-01, 9.986911518391108e-01, 1.003101641972662e+00, 1.004218398789794e+00, 1.002013153286248e+00, 9.391520197023548e-01, 9.718098842587097e-01, 1.004218398789794e+00, 1.028811178984129e+00, 9.906930076896483e-01, 1.000000000000000e+00, 1.003101641972661e+00, 1.000041660912518e+00, 1.000896397214176e+00,-6.816589735179274e+02,-1.084595375000000e+06,-1.053428656250000e+06,-6.898380781250000e+05,-9.646252226562500e+05,-9.248353828125000e+05, 1.740456342697133e+00, 9.420697018500712e-01, 1.049086261540483e+00, 1.151831865310630e+00, 1.070025980472519e+00, 2.215560913085917e+00, 8.621966830369048e-01, 1.039153825288474e+00, 1.231180489063188e+00, 1.099351406097324e+00, 2.367364883422827e+00, 8.088930876815595e-01, 1.006792400395448e+00, 1.252006113529105e+00, 1.108648717403296e+00, 2.239842414855931e+00, 7.948492078628132e-01, 9.537848090230652e-01, 1.225186288356672e+00, 1.100826203822965e+00, 1.955817461013772e+00, 8.174166444430848e-01, 9.434605348760020e-01, 1.173709630966085e+00, 1.083329916000251e+00, 1.642910003662092e+00, 8.625847668101152e-01, 9.487569629474911e-01, 1.119902253150857e+00, 1.063922047614959e+00, 1.385215580463398e+00, 9.132438301851473e-01, 9.612678530668286e-01, 1.077387571334780e+00, 1.047769121825630e+00, 1.210645496845238e+00, 9.568538181480447e-01, 9.798460863306148e-01, 1.049969587475024e+00, 1.036741930991371e+00, 1.110036253929134e+00, 9.880154319107257e-01, 9.973230699540945e-01, 1.035176958888749e+00, 1.030361384153345e+00, 1.059764284640550e+00, 1.007092889398330e+00, 1.010153356939538e+00, 1.028476625680914e+00, 1.027193285524834e+00, 1.037754297256469e+00, 1.017277095466850e+00, 1.017999485135074e+00, 1.025970183312889e+00, 1.025839652866120e+00, 1.029255405068398e+00, 1.022067971527575e+00, 1.022117994725703e+00, 1.025238625705240e+00, 1.025346063077448e+00, 1.026350062340498e+00, 1.024067506194115e+00, 1.024003818631172e+00, 1.025104723870754e+00, 1.025196127593516e+00, 1.025468096137047e+00, 1.024810910224915e+00, 1.024764768779278e+00, 1.025115087628365e+00, 1.025160629302263e+00, 1.025229826569557e+00, 1.025058060884476e+00, 1.025037329643965e+00, 1.025137882679701e+00, 1.025155592709780e+00, 1.025172512978315e+00, 1.025131687521935e+00, 1.025124348700047e+00, 1.025150395929813e+00, 1.025156177580357e+00, 1.025160226970911e+00, 1.025151398032904e+00, 1.025149203836918e+00, 1.025155294686556e+00, 1.025156926363707e+00, 1.025157883763313e+00, 1.025156144052744e+00, 1.025155574083328e+00, 1.025156859308481e+00, 1.025157265365124e+00, 1.025157485157251e+00, 1.025157172232866e+00, 1.025157041847706e+00, 1.025157287716866e+00, 1.025157377123833e+00, 1.025157421827316e+00, 1.025157373398542e+00, 1.025157347321510e+00, 1.025157388299704e+00, 1.025157406926155e+00, 1.025157414376736e+00, 1.025157406926155e+00, 1.025157403200865e+00, 1.025157410651445e+00,
     1.025157410651445e+00};


    // Get datastructures
    std::vector<pwm::SparseMatrix<double, int>*> matrices = pwm::get_all_matrices<double, int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            mat->loadFromTriplets(input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->mv(x,y);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(y[i] == real_sol[i]);
            }

            // If matrix is an omp or TBB matrix break because all executions are the same
            if ((mat_index-1) % 6 == 0 || (mat_index-2) % 6 == 0) {
                break;
            }
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }
}

BOOST_AUTO_TEST_CASE(mv_gre_1107, * boost::unit_test::tolerance(std::pow(10, -14))) {
    pwm::Triplet<double, int> input_mat;
    input_mat.loadFromMM("test_input/gre_1107.mtx");
    int mat_size = input_mat.col_size;

    // Precomputed solution using matlab
    double real_sol[] = {1.272700000000000e+00, 1.636310000000000e+00,1.121110000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,9.999000000000000e-01,1.272710000000000e+00,1.151410000000000e+00,9.090000000000000e-01,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,7.575101787999999e-01,9.999000000000000e-01,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,9.090000000000000e-01,1.363610000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,6.363001788000000e-01,7.575101787999999e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,9.090000000000000e-01,1.363610000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,6.363001788000000e-01,6.363001788000000e-01,7.575101787999999e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,6.363001788000000e-01,6.363001788000000e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,6.363001788000000e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,8.787101787999999e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,8.787101787999999e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.363610000000000e+00,7.273100000000000e-01,8.485100000000000e-01,7.272200000000000e-01,1.121110000000000e+00,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,8.787101787999999e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,6.364100000000000e-01,8.788100000000000e-01,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.000010000000000e+00,1.121210000000000e+00,9.999199999999999e-01,8.484099999999999e-01,1.121110000000000e+00,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,8.787099999999999e-01,1.090820000000000e+00,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,8.787101787999999e-01,1.272710000000000e+00,1.272710000000000e+00,1.000010000000000e+00,1.242410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.000010000000000e+00,1.121210000000000e+00,9.999199999999999e-01,1.121110000000000e+00,8.484099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,8.787099999999999e-01,1.242310000000000e+00,1.090820000000000e+00,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,8.787101787999999e-01,1.272710000000000e+00,1.000010000000000e+00,1.242410000000000e+00,1.151410000000000e+00,1.121110000000000e+00,1.121110000000000e+00,8.484099999999999e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.242310000000000e+00,1.242310000000000e+00,1.090820000000000e+00,8.787101787999999e-01,8.787101787999999e-01,8.787101787999999e-01,1.000010000000000e+00,1.242410000000000e+00,1.121110000000000e+00,1.121110000000000e+00,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.242310000000000e+00,1.242310000000000e+00,8.787101787999999e-01,1.121110000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.242310000000000e+00};


    // Get datastructures
    std::vector<pwm::SparseMatrix<double, int>*> matrices = pwm::get_all_matrices<double, int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            mat->loadFromTriplets(input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->mv(x,y);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(y[i] == real_sol[i]);
            }

            // If matrix is an omp or TBB matrix break because all executions are the same
            if ((mat_index-1) % 6 == 0 || (mat_index-2) % 6 == 0) {
                break;
            }
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }
}

BOOST_AUTO_TEST_CASE(mv_8_4_bin_no_rand, * boost::unit_test::tolerance(std::pow(10, -14))) {
    pwm::Triplet<double, int> input_mat;
    input_mat.loadFromKronecker("test_input/test_mat_8_4.bin", std::pow(2, 8), false);
    int mat_size = input_mat.col_size;

    // Precomputed solution using matlab
    double real_sol[] = {0.,   0.,   1.,   0.,   2.,   0.,   0.,  12.,   0.,  10.,   0.,   2.,   0.,   9.,   0.,   1.,   0.,  17.,   0.,   2.,   0.,   0.,   0.,   3.,   2.,   0.,   3.,   1.,   1.,  71.,   0.,   0.,   0.,   4.,   0.,   3.,   0.,   3.,  55.,   1.,   1.,   1.,   0.,   0.,   0.,  54.,   0.,  10.,   1.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   3.,   0.,   0.,   0.,   0.,  45.,   0.,   4.,   0.,  17.,   1.,   6.,   0.,   0.,   0.,   0.,   4.,   3.,   0.,   0.,  10.,   0.,   0.,   0.,   0.,   5.,   0.,   0.,   2.,   0.,   1.,   2.,  17.,   0.,   1.,   0.,   2.,   0.,   0.,   0.,   0.,  10.,   3.,   0., 252.,   0.,   8.,   1.,   2.,   0.,   4.,   0.,   0.,   1.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   3.,   0.,   0.,   0.,   0.,   1.,   0.,   1.,   0.,   4.,   5.,   0.,   0.,   0.,   3.,   1.,   2.,  18.,   1.,   0.,   0.,   0.,  13.,   0.,   0.,   0.,   0.,   1.,   0.,   0.,   0.,   0.,  30.,   1.,   1.,   0.,   5.,   0.,   1.,   0.,   0.,  11.,   0.,   0.,   0.,   0.,   1.,   0.,   0.,  59.,   0.,   0.,   0.,   0.,  11.,   0.,   0.,   0.,   0.,  12.,   5.,   0.,  13.,   0.,   0.,   2.,   0.,   0.,   2.,   0.,   0.,   0.,   1.,  13.,   0.,   0.,   0.,   0.,   0.,   2.,   3.,   4.,   0.,   2.,   0.,   0.,   0.,   1.,   0.,   1.,  15.,   2.,   0.,   2.,   3.,   0.,   0.,   0.,   0.,   0.,   4.,   1.,   0.,   9.,   0.,   0.,  11.,   0.,   1.,  15.,   0.,   4.,   0.,   5.,   0.,   0.,   0.,   0.,   1.,   2.,   0.,   0.,   5.,   2.,   0.,   0.,  10.,   0.,   0.,   1.,   0.,   3.,   2.,   0.,   0.,  18.,   0.,   0.,0.};

    // Get datastructures
    std::vector<pwm::SparseMatrix<double, int>*> matrices = pwm::get_all_matrices<double, int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            std::cout << mat_index << " " << partitions << std::endl;
            mat->loadFromTriplets(input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->mv(x,y);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(y[i] == real_sol[i]);
            }

            // If matrix is an omp or TBB matrix break because all executions are the same
            if ((mat_index-1) % 6 == 0 || (mat_index-2) % 6 == 0) {
                break;
            }
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }
}

BOOST_AUTO_TEST_SUITE_END()